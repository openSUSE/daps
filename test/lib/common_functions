#!/bin/bash
#
# Copyright (C) 2012-2020 SUSE Software Solutions Germany GmbH
#
# Author:
# Frank Sundermeyer <fsundermeyer at opensuse dot org>
#
# Testing DAPS: Common functions
#

# ---------
# Usage
#
function usage () {
    echo "Something useful"
}

# --------
# Clean up the build directory
# Arguments:
#  all:      completely removes the build directory (${_PRJ_DIR}/build)
#  fo:       remove FO files (${_PRJ_DIR}/build/.tmp/*.fo)
#  images:   remove the images directory (${_PRJ_DIR}/build/.images)
#  profiles: remove profiling directories (${_PRJ_DIR}/build/.profiled)
#  results:  remove build results (${_PRJ_DIR}/build/$_BOOKNAME)
#  tmp:      remove temp directory (${_PRJ_DIR}/build/.tmp)
#
function clean_build_dir () {
    [[ -d "${_PRJ_DIR}" ]] || (echo "Attempting to delete an empty directory" && exit 1)
    [[ -z $1 ]] && (echo "You must specify a parameter for the clean buildir function" && exit 1)
    case $1 in
        all)
            rm -rf "${_PRJ_DIR}/build"
            ;;
        fo)
            rm -f "${_PRJ_DIR}/build/.tmp/"*.fo
            ;;
        images)
            rm -rf "${_PRJ_DIR}/build/.images"
            ;;
        profiles)
            rm -rf "${_PRJ_DIR}/build/.profiled"
            ;;
        results)
            rm -rf "${_PRJ_DIR}/build/$_BOOKNAME"
            ;;
        tmp)
            rm -rf "${_PRJ_DIR}/build/.tmp"
            ;;
        *)
            exit_on_error "Wrong parameter for function cleandir"
            ;;
    esac
}

# ---------
# Verbose error handling
#
function exit_on_error () {
    echo -e "ERROR: ${1}" >&2
    clean_build_dir all
    exit 1;
}

# ---------
# Print Test Header
#
function header () {
    echo
    echo "Test: $1"
    echo "=================================================="
}

# ---------
# Create tempdir
# 

function make_tempdir () {
    # Expects variable name and sets it to the path of the generated temp dir
    local _TMPDIR
    [[ -z $1 ]] && exit_on_error "${FUNCNAME[0]} was called with a empty parameter"
    _TMPDIR=$(mktemp -d -q ${SHUNIT_TMPDIR}/XXXXXXXXXX)
    if [ $? -eq 0 ]; then
	eval "$1='$_TMPDIR'"
    else
	exit_on_error " Creating a temporary directory failed. Skipping tests"
    fi
}

# --------
# Collect overall stats
#
function stats () {
    _FAILED=$(cat ${_TEMPDIR}/failed)
    _SKIPPED=$(cat ${_TEMPDIR}/skipped)
    _TOTAL=$(cat ${_TEMPDIR}/total)

    echo "$(( _FAILED + __shunit_assertsFailed ))" > ${_TEMPDIR}/failed
    echo "$(( _SKIPPED + __shunit_assertsSkipped ))" > ${_TEMPDIR}/skipped
    echo "$(( _TOTAL + __shunit_testsTotal ))" > ${_TEMPDIR}/total
}
