#!/usr/bin/env python3
#
# This script is needed as xmllint cannot ignore double IDs
# lxml
#
#
"""Performs a well-formedness check on XML.

 * Does XInclude processing before any checks;
 * Warns about files which cannot be found
 * Ignores non-unique IDs (attributes xml:id or id)
"""

__author__ = "Thomas Schraitle"
__version__ = "0.3.0"

import argparse
import os
import sys

from lxml import etree

# -- Constants
HERE = os.path.dirname(os.path.realpath(__file__))
BASE = os.path.basename(__file__)
XINCLUDE_XSLT = os.path.join(HERE, "%s-xinclude.xsl" % BASE)
SUSE_NS = "urn:x-suse:ns:python"

# -- Useful global variables
XMLPARSER = etree.XMLParser(collect_ids=False)
XSLT = etree.parse(XINCLUDE_XSLT)

# Some global variables to store the result
XMLFILES=[]
NOTFOUND=[]
PROBLEMS=[]


if etree.LXML_VERSION < (3, 4, 0):
    print("ERROR: Need minimum version 3.4.0 of lxml.",
          file=sys.stderr)
    sys.exit(10)

if not os.path.exists(XINCLUDE_XSLT):
    print("ERROR: Missing file %s" % XINCLUDE_XSLT, file=sys.stderr)
    sys.exit(125)

# ------------------------------------------------------------
# Extension Functions in a SUSE namespace

def exists(context, f) -> bool:
    """Test whether a path exists.  Returns False for
       broken symbolic links

        :param context:
        :param list f: list of path name (however, we
                       are only interested in the first
                       item
        :return: True=Path exists, False otherwise
        :rtype: bool
    """
    f = f[0]
    d = context.context_node.getroottree().docinfo.URL
    d = os.path.dirname(d)
    return os.path.exists(os.path.join(d, f))


def abspath(context, f) -> str:
    """Return the absolute path of the context node

        :param context:
        :param list f: list of path name (however, we
                       are only interested in the first
                       item
        :return: absolute path
        :rtype: str
    """
    f = f[0]
    d = context.context_node.getroottree().docinfo.URL
    d = os.path.dirname(d)
    return os.path.abspath(os.path.join(d, f))


# ------------------------------------------------------------
#
def parse_cli(args=None) -> argparse.Namespace:
    """Parse CLI arguments

    :param list args: Use the list or sys.args
    :return: parsed arguments
    :rtype: :class:`argparse.Namespace`
    """
    parser = argparse.ArgumentParser(description=__doc__.split("\n", 1)[0],
                                     epilog=__doc__.split("\n", 1)[-1],
                                     )
    parser.add_argument("--version",
                        action="version",
                        version="%(prog)s {}".format(__version__),
                        )
    parser.add_argument("--xinclude",
                        action="store_true",
                        default=False,
                        help="Do XInclude processing"
                        )
    parser.add_argument("-X", "--list-files",
                        action="store_true",
                        default=False,
                        help="List all XML files which were found"
                        )
    parser.add_argument("-W", "--warnings-as-errors",
                        action="store_true",
                        default=False,
                        help=("Flag to set the behavior when "
                              "referenced files with XIncludes cannot "
                              "be found; "
                              "(default: %(default)s)")
                        )
    parser.add_argument("-S", "--stats",
                        action="store_true",
                        default=False,
                        help=("Print statistic about successful/"
                              "failed files"
                              )
                        )
    parser.add_argument("xmlfiles",
                        nargs="+",
                        help="XML file(s) to check for well-formedness"
                        )
    args = parser.parse_args(args)
    # print(args, file=sys.stderr)
    return args


def unique(lst: list):
    """Makes a list unique (preserves order)

    :param lst: the list that needs to be unique
    :return: the (maybe) reduced list with unique elements
    """
    seen = {}

    for item in lst:
        if item in seen: continue
        seen[item] = 1
        yield item


def get_all_files(xmlfile: str, xinclude: bool):
    """Returns a list of all files when enabling XInclude processing

    :param xmlfile: filename of XML file
    :param xinclude: Enable or disable XInclude processing
    :return:
    """
    ns = etree.FunctionNamespace(SUSE_NS)
    ns['exists'] = exists
    ns['abspath'] = abspath

    xifiles = []
    notfound = []
    problems = []
    error = None

    try:
        tree = etree.parse(xmlfile, parser=XMLPARSER)
        transform = etree.XSLT(XSLT)
        if xinclude:
            result = transform(tree)
            for entry in transform.error_log:
                msg = entry.message
                if msg.startswith("WARN:"):
                    _, f = msg.split(":")
                    notfound.append(f)
                else:
                    problems.append(str(entry))
            xifiles = str(result).rstrip().split("\n")

    except ValueError as err:
        error = err
        rc = ReturnCode.value_err
    except etree.XIncludeError as error:
        error = err
        rc = ReturnCode.xinclude_err
    except etree.XMLSyntaxError as err:
        error = err
        rc = ReturnCode.syntax_error

    if error:
        print(error, file=sys.stderr)
        sys.exit(rc.value)

    return xifiles, notfound, problems


def main() -> int:
    """Main function

    :return: error code
    """
    failures, successes = (0, 0)

    args = parse_cli()

    for xmlfile in args.xmlfiles:
        xifiles, notfound, problems = get_all_files(xmlfile, args.xinclude)
        XMLFILES.extend(xifiles)
        NOTFOUND.extend(notfound)
        PROBLEMS.extend(problems)
        successes += len(xifiles)
        failures += len(notfound)

    if args.list_files:
        print("---- XML Files ----", file=sys.stderr)
        for f in unique(XMLFILES):
            print(f, file=sys.stderr)
        print()

    if PROBLEMS:
        print("---- XML Problems ---", file=sys.stderr)
        for p in PROBLEMS:
            print(p, file=sys.stderr)
        print()

    if NOTFOUND:
        print("--- Missing Files ---", file=sys.stderr)
        for f in NOTFOUND:
            print(f, file=sys.stderr)
        print()

    if args.stats:
        msg = ("--- Successful Files={s}, "
               "Failed files={f} ---").format(s=successes, f=failures)
        print(msg, file=sys.stderr)

    return 1 if bool(PROBLEMS or NOTFOUND) else 0

if __name__ == "__main__":
    sys.exit(main())
