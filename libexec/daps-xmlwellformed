#!/usr/bin/env python3
#
# This script was needed as xmllint cannot ignore double xml:ids
#
"""Performs a well-formedness check on XML.

* Does XInclude processing before any checks;
* Ignores non-unique IDs (attribute xml:id's)
"""

import argparse
import sys
import textwrap
from lxml import etree

__author__ = "Thomas Schraitle"


def check_wellformedness(xmlfile, xinclude=True):
    """Checks a file for well-formedness

    :param str xmlfile: filename to XML file
    :param bool xinclude: do xinclude processing (default: True) or not
    :return: 0 (everything ok) or != 0 (some problem)
    :rtype: int
    """
    # We don't want to collect all IDs to avoid problems when
    # IDs are non-unique:
    xmlparser = etree.XMLParser(collect_ids=False)
    try:
        tree = etree.parse(xmlfile, parser=xmlparser)
        if xinclude:
            tree.xinclude()
            # This test is needed to perform XInclude resolution on
            # second and third levels:
            if list(tree.iter("{http://www.w3.org/2001/XInclude}include")):
                tree.xinclude()
        return 0
    except (etree.XMLSyntaxError, etree.XIncludeError) as err:
        print("ERROR: %s" % err, file=sys.stderr)
        print(textwrap.indent(str(err.error_log), prefix="       "), file=sys.stderr)
        return 10


def parse_cli(args=None):
    """Parse CLI arguments

    :param list args: Use the list or sys.args
    :return: parsed arguments
    :rtype: :class:`argparse.Namespace`
    """
    parser = argparse.ArgumentParser(description=__doc__.split("\n", 1)[0],
                                     epilog=__doc__.split("\n", 1)[-1],
                                     )
    parser.add_argument("--xinclude",
                        action="store_true",
                        default=False,
                        help="Do XInclude processing"
                        )
    parser.add_argument("xmlfile",
                        help="XML file to check well-formedness"
                        )
    args = parser.parse_args(args)
    # print(args, file=sys.stderr)
    return args


if __name__ == "__main__":
    args = parse_cli()
    result = check_wellformedness(args.xmlfile, args.xinclude)
    sys.exit(result)
